
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;  // For Observer
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.DefaultListModel;
// Generated by Together


/**
 * An interface to SAAMS:
 * Radar tracking of arriving and departing aircraft, and transceiver for downloading of flight descriptors
 * (by aircraft entering the local airspace) and uploading of passenger lists (to aircraft about to depart).
 * A screen simulation of the radar/transceiver system.
 * 
 * This class is a controller for the AircraftManagementDatabase: it sends messages to notify when a new aircraft is detected
 * (message contains a FlightDescriptor), and when radar contact with an aircraft is lost.
 * 
 * It also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class RadarTransceiver extends JFrame implements Observer, ActionListener, ListSelectionListener
{
/**
  * The Radar Transceiver interface has access to the AircraftManagementDatabase.
  * @clientCardinality 1
  * @supplierCardinality 1
  * @label accesses/observes
  * @directed*/
	private AircraftManagementDatabase aircraftManagementDatabase;
	private JButton enterAirspace;  // As it says
    private JButton leaveAirspace;  // As it says
    private JButton listPassengers; // As it says
    private JButton quit;        	// As it says
    private JTextArea info;			// As it says
    private JList <String>list;				// As List of aircraft
    private DefaultListModel <String>listModel;
    private int size = 0;			// size of list
    private int index;				// Index at
    private JLabel aircraft;
    private int totalAircraft = 0;
    /**
     * 
     * Radar Transceiver constructor
     * @param aircraftManagementDatabase sent our aircraft management DB
     */
	public RadarTransceiver(AircraftManagementDatabase aircraftManagementDatabase)
	{
	  this.aircraftManagementDatabase = aircraftManagementDatabase;
	  // Configure the window
      setTitle("Radar/Transceiver");
      setLocation(530,40);
      setSize(500,300);
      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
      Container window = getContentPane();
      window.setLayout(new FlowLayout());     // The default is that JFrame uses BorderLayout 
      // Set up input GUI
      enterAirspace = new JButton("Enter Airspace");
      window.add(enterAirspace);
      enterAirspace.addActionListener(this);
      
      leaveAirspace = new JButton("Leave Airspace");
      window.add(leaveAirspace);
      leaveAirspace.addActionListener(this);
      
      listPassengers = new JButton("List Passengers");
      window.add(listPassengers);
      listPassengers.addActionListener(this);
      
      quit = new JButton("Quit");
      window.add(quit);
      quit.addActionListener(this);      
      info = new JTextArea();

      JScrollPane pane = new JScrollPane(info);
      pane.setPreferredSize(new Dimension(375, 200));
      info.setEditable(false);
      add(pane, BorderLayout.CENTER);

      listModel = new DefaultListModel<String>();
      //Create the list and put it in a scroll pane.
      list = new JList<String>(listModel);
      list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      list.setSelectedIndex(-1);
      list.addListSelectionListener(this);
      list.setVisibleRowCount(10);
      
      size = listModel.getSize();
      listPassengers.setEnabled(false);
      leaveAirspace.setEnabled(false);
      JScrollPane listScrollPane = new JScrollPane(list);
      listScrollPane.setPreferredSize(new Dimension(70, 200));
      add(listScrollPane, BorderLayout.CENTER);
      aircraft = new JLabel("[Aircraft #]", SwingConstants.CENTER);
      window.add(aircraft);
      setVisible(true);
      setResizable(false);
      aircraftManagementDatabase.addObserver(this);
	 }
	/**
	 * Standard action performed method
	 */
	 public void actionPerformed(ActionEvent e) 
	 {
		 index = list.getSelectedIndex();	
		 if (e.getSource() == enterAirspace)
			 	inboundAircraft();
		 if (e.getSource() == leaveAirspace)
	            outboundAircraft();
		 if (e.getSource() == listPassengers)
	            getPassengerList();
		 if (e.getSource() == quit)
	            System.exit(0);	   
		 
		 list.setSelectedIndex(index);
	     list.ensureIndexIsVisible(index);
	 } // actionPerformed
	 /**
	  *	Set up to create a randomised aircraft to fly into Stirling airspace, all details are somewhat random, set to only handle up to our max
	  */
	 public void inboundAircraft()
	 {
		 String[] title = new String[] {"BA", "VS", "U2"};
		 Random rand = new Random();
		 int n = rand.nextInt(2);
		 String t = title[n];
		 n = rand.nextInt(9999);
		 t += n;
		 if(totalAircraft < aircraftManagementDatabase.maxMRs)
		 {	 
			 String[] fromArr = new String[]{"London", "Paris", "Berlin", "Amsterdam", "Prague", "Budapest","Rome","Barcelona", "Athens", "Vienna"};
			 String[] toArr = new String[]{"Moscow", "Sydney", "Beijing", "Stirling", "Stirling", "Stirling","Stirling","Stirling", "London", "Edinburgh"};
			 String[] nextArr = new String[]{"London", "Paris", "Berlin", "Amsterdam", "Prague", "Sydney","London","Paris", "Berlin", "Amsterdam"};
			 n = rand.nextInt(9);
			 String from = fromArr[n];
			 String to = toArr[n];
			 String next = nextArr[n];
			 Itinerary it = new Itinerary(from,to,next);
			 
			 PassengerList pl = new PassengerList();
			 String[] listOfNames = new String[] {"Tiara Berrey", "Adrianne Canedy","Bettina Hoppe","Maricela Kerby", "Antoinette Bergren","Sheryll Cromer","Marlene Nilges",
					 "Faith Speir" ,"Penney Spiro" ,"Terrance Bauer", "Destiny Schmit","Antonetta Cisneros", "Michael Shedrick", "Huong Eidt","Roselee Hieb", "Jarod Wilder",
					 "Clay Lothrop" , "Jo Nance", "Signe Eichner" ,"Cherie Blaylock" ,"Abbey Happel" ,"Parthenia Garon" ,"Sueann Sowder" ,"Sibyl Trollinger", "Nigel Rozar",
					 "Eric Shealy", "Scottie Stratford" ,"Yan Fenderson", "Dani Lopresti", "Donetta Barber" , "Barney Edgemon" ,"Rayford Tristan" ,"Norberto Sinegal",
					 "Darcel Chavous", "Andre Cresswell", "Migdalia Schillinger", "Norbert Hardin", "Maegan Lauver", "Monte Criddle", "Jerrold Heims","Booker Saad" ,"Shanita Lehto",
					"Stan Catto" ,"Yer Jack","Lavelle Utter", "Nora Eidson" ,"Augusta Zingaro" ,"Karena Primer" ,"Wally Pellham","Aleta Almaguer"}; 
			 n = rand.nextInt(39 - 15) + 15;
			 for(int i = rand.nextInt(10); i < n; i++)
			 {
				 PassengerDetails pd = new PassengerDetails(listOfNames[i]);
				 pl.addPassenger(pd);
			 }
			 FlightDescriptor fd = new FlightDescriptor(t, it, pl);
			 info.append(t + " from " + from + " going to " + to + " then " + next + " entered airspace.\n");
			 aircraftManagementDatabase.radarDetect(fd);
		 }
		 else
		 {
			 info.append("Aircraft " + t +" diverted as Stirling airport at maximum capacity!\n");
		 }
	 }
	 /**
	  * This allows for any aircraft flying through Stirling airspace to fly on and be removed from the list and database
	  * For button use this could be entirely replaced by the automatic method
	  */
	 public void outboundAircraft()
	 {
		 for(int i = 0; i < aircraftManagementDatabase.maxMRs; i++)
		 { 
			 String fc = aircraftManagementDatabase.getFlightCode(i);
			 if(listModel.get(index).toString().equals(fc))
			 {
				 aircraftManagementDatabase.radarLostContact(i);
				 info.append("Aircraft " + fc + " has left Stirling airspace.\n");	
				 break;
			 }
		 }
	 }
	 /*
	  * Returns the full passenger list in a j option message, due to us having 50 passengers this is a suitable data type for this
	  * If we were to have more than 50 a new window and text field may be more appropriate
	  */
	 public void getPassengerList()
	 {
		 int pSize = 0;
		 PassengerDetails[] pd = null;
		 String pass = "";
		 for(int i = 0; i < aircraftManagementDatabase.maxMRs; i++)
		 { 
			 String fc = aircraftManagementDatabase.getFlightCode(i);
			 if(listModel.get(index).toString().equals(fc))
			 {
				 PassengerList pl = aircraftManagementDatabase.getPassengerList(i);
				 pSize = pl.getSize();
				 pd = new PassengerDetails[pSize];
				 pd = pl.getPassengerDetails();			
				 break;
			 }
			 
		 }
		 if(pd != null)
			 for(int i = 0; i < pSize; i++)
				 pass += pd[i].getName() + "\n";
			 
		 if(pass != null)
			 JOptionPane.showMessageDialog(this, pass);
	 }
	 /*
	  * List of flight codes from the DB and this transceiver are noted,
	  * Then we check to see if the size plus free space is equal to 9 indicating we are adding elements
	  * if it isnt we are removing them, both are completed by comparing lists of flight codes and updated accordingly
	  * this system can work on any number of displays 
	  */
	 public void update(Observable o, Object arg) 
	 {  
		 checkValue();		 
		 String[] flightCodes = new String[size];
		 int notFree = 0;
		 for(int i = 0; i < listModel.getSize(); i++)
		 {
			 flightCodes[i] = listModel.elementAt(i).toString();
		 }
		 String[] DBFlightCodes = new String[aircraftManagementDatabase.maxMRs];
		 for(int i = 0; i < aircraftManagementDatabase.maxMRs; i++)
		 {
			 DBFlightCodes[i] = aircraftManagementDatabase.getFlightCode(i);
			 if(aircraftManagementDatabase.getStatus(i) != 0)
				 notFree++;
		 }
		 if(totalAircraft != notFree)
		 {
			 totalAircraft = notFree;
			 aircraft.setText("# Of Aircraft: " + totalAircraft);
		 }
		 /*
		  * Check if the aircraft is in transit or waiting to land, remove aircraft that has been transferred to new status
		  */	
		 
		 for(int i = 0; i < aircraftManagementDatabase.maxMRs; i++)
		 {
			 if(aircraftManagementDatabase.getFlightCode(i) != null && !Arrays.asList(flightCodes).contains(aircraftManagementDatabase.getFlightCode(i)))
			 {
					 if(aircraftManagementDatabase.getStatus(i) == 1 || aircraftManagementDatabase.getStatus(i) == 2 || aircraftManagementDatabase.getStatus(i) == 18)
					 {
						 listModel.addElement(aircraftManagementDatabase.getFlightCode(i));
						 size ++;
						 if(aircraftManagementDatabase.getStatus(i) == 18)
							 info.append("Outbound aircraft " + aircraftManagementDatabase.getFlightCode(i) + " transferred from LATC.\n");	
						 break;
					 }
			 }
		 }
		 for (int i = 0; i < size; i++) 
		 {
				if (!Arrays.asList(DBFlightCodes).contains(listModel.elementAt(i))) 
				{
					listModel.remove(i);
					size--;
					break;
				}
		}
		 //if its not a transfer it is either being added or removed
		for (int i = 0; i < size; i++) 
		{
			 for(int j = 0; j < aircraftManagementDatabase.maxMRs; j++)
			 {
				 if(listModel.elementAt(i).equals(aircraftManagementDatabase.getFlightCode(j)))
					 if(aircraftManagementDatabase.getStatus(j) != 1 && aircraftManagementDatabase.getStatus(j) != 2 && aircraftManagementDatabase.getStatus(j) != 18)
					 {
						 listModel.remove(i);
						 size--;
						 info.append("Aircraft " + aircraftManagementDatabase.getFlightCode(j) + " has been transferred to LATC.\n");	
						 break;
					 }
			 }
		 }
		
		
	 }// update
	
	 /*
	  *	Handles the list selection, and is updated when the index selection changes
	  */
	 @Override
	 public void valueChanged(ListSelectionEvent e) 
	 {
		 checkValue();
	 }
	 public void checkValue()
	 {
		 String fc = null;
		 if(list.getSelectedIndex() != -1)
			 fc = listModel.elementAt(list.getSelectedIndex());
		 int which = -1;
		 if(fc != null)
		 {
			 for(int i = 0; i < aircraftManagementDatabase.maxMRs; i++)
			 {
				 if(fc.equals(aircraftManagementDatabase.getFlightCode(i)))
				 {
					 which = i;
					 break;
				 }
			 }
		 }
		 if(size == 0 || list.getSelectedIndex() == -1)
		 {
			 listPassengers.setEnabled(false);
			 leaveAirspace.setEnabled(false);
		 }
		 else
		 {
			 listPassengers.setEnabled(true);
			 if(which != -1 && (aircraftManagementDatabase.getStatus(which) == 18 || aircraftManagementDatabase.getStatus(which) == 1))
				 leaveAirspace.setEnabled(true);
			 else
				 leaveAirspace.setEnabled(false);
		 }
	 }
}
