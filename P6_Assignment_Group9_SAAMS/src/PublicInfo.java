import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together


/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements ActionListener, Observer, ListSelectionListener {
/**
  * Each Public Information Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
	private AircraftManagementDatabase aircraftManagementDatabase;
	private int selectedIndex;
	private JTextArea info; // As it says
	private JList<String> list; // As List of aircraft
	private DefaultListModel<String> listModel;
	private int size = 0;
	/**
     * constructor
     */
	public PublicInfo(AircraftManagementDatabase db)
	{

	this.aircraftManagementDatabase = db;
	setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	setTitle("Public information");
	setLocation(1020, 40);
	setSize(300, 300);
	Container window = getContentPane();
	window.setLayout(new FlowLayout());
	listModel = new DefaultListModel();
	// Create the list and put it in a scroll pane.
	list = new JList(listModel);
	list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	list.setSelectedIndex(-1);
	list.addListSelectionListener(this);
	list.setVisibleRowCount(10);
	JScrollPane listScrollPane = new JScrollPane(list);
	listScrollPane.setPreferredSize(new Dimension(275, 250));
	add(listScrollPane, BorderLayout.CENTER);
	setVisible(true);
	setResizable(false);
	// Subscribe to the model
	aircraftManagementDatabase.addObserver(this);
	}
	/**
     * @return the status code of the aircraft.
     */
	public String getStatusCode(int which)
	{
		int status = aircraftManagementDatabase.getStatus(which);
		String statusNow = "";
		if(status >= 2 && status <= 4)
		{
			statusNow = "Inbound";
		}
		else if(status >= 5 && status <= 13)
		{
			statusNow = "Landed";
		}
		else if(status == 14)
		{
			statusNow = "Boarding";
		}
		else if(status == 15)
		{
			statusNow = "Gate closed";
		}
		else if(status >= 16)
		{
			statusNow = "Departing";
		}
		return statusNow;
	}
	/*
	 * Main update function adds and removes aircraft as required
	 * When their status changes it updates them
	 * This will output all current flights, for a future version if timestamps were used
	 * this information could be ordered in a list or sorted into one depending on the structure used
	 */
	public void update(Observable o, Object arg) {
		String[] flightCodes = new String[size];
		for (int i = 0; i < size; i++) {
			flightCodes[i] = listModel.elementAt(i).toString();
		}
		String[] DBFlightCodes = new String[aircraftManagementDatabase.maxMRs];
		for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
			String status = getStatusCode(i);
			String gate = "X";
			if(aircraftManagementDatabase.getGateNumber(i) != -1)
			{
				gate = "";
				gate = Integer.toString(aircraftManagementDatabase.getGateNumber(i) + 1);
			}
			if(aircraftManagementDatabase.getStatus(i) != 0)
			{
				DBFlightCodes[i] = aircraftManagementDatabase.getFlightCode(i) + " : To " + aircraftManagementDatabase.getItinerary(i).getNext() + " : Gate " + 
			gate + " : " + status;
			}
		}

		for (int i = 0; i < aircraftManagementDatabase.maxMRs; i++) {
			String status = getStatusCode(i);
			String gate = "X";
			if(aircraftManagementDatabase.getGateNumber(i) != -1)
			{
				gate = "";
				gate = Integer.toString(aircraftManagementDatabase.getGateNumber(i) + 1);
			}
			if (aircraftManagementDatabase.getFlightCode(i) != null
					&& !Arrays.asList(flightCodes).contains(aircraftManagementDatabase.getFlightCode(i) + " : To " + aircraftManagementDatabase.getItinerary(i).getNext() + " : Gate " + 
							gate + " : " + status)) {
				if (aircraftManagementDatabase.getStatus(i) == 2 || aircraftManagementDatabase.getStatus(i) == 3
						|| aircraftManagementDatabase.getStatus(i) == 4 || aircraftManagementDatabase.getStatus(i) == 5
						|| aircraftManagementDatabase.getStatus(i) == 6 || aircraftManagementDatabase.getStatus(i) == 7
						|| aircraftManagementDatabase.getStatus(i) == 14 || aircraftManagementDatabase.getStatus(i) == 15
						|| aircraftManagementDatabase.getStatus(i) == 16 || aircraftManagementDatabase.getStatus(i) == 17 || aircraftManagementDatabase.getStatus(i) == 18)
				{
					listModel.addElement(aircraftManagementDatabase.getFlightCode(i) + " : To " + aircraftManagementDatabase.getItinerary(i).getNext() + " : Gate " + 
							gate + " : " + status);
					size++;
					break;
				}
			}
		}
		for (int i = 0; i < size; i++) {
			if (!Arrays.asList(DBFlightCodes).contains(listModel.elementAt(i))) {
				listModel.remove(i);
				size--;
				break;
			}
		}
	} // update

	@Override
	public void valueChanged(ListSelectionEvent e) {
		if (list.getSelectedIndex() != -1)
			list.clearSelection();
	}
	
	public void actionPerformed(ActionEvent e) {
		//not used
	}
}
