import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.regex.Pattern;

import javax.swing.*;

// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully emarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener {
/**
  *  The GateConsole interface has access to the GateInfoDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @label accesses/observes
  * @directed*/
  GateInfoDatabase gateInfoDatabase;

/**
  *  The GateConsole interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 0..*
  * @directed
  * @label accesses/observes*/
  private AircraftManagementDatabase AircraftManagementDatabase;

/**
 * This gate's gateNumber
 * - for identifying this gate's information in the GateInfoDatabase.
 */
  private int gateNumber;
  
  /**
   * in order to display gate in correct format
   * As opposed to have Gate 0, Gate 1 and Gate 2
   * It be Gate 1, Gate 2 and Gate 3
   */
  private int displayGateNumber;
  
  /**
   * This check for when gateConsole is looking for the flight
   * that has been allocated to this gate.
   *  - to confirm that a check has already been done.
   */
  private boolean checkGotFlight = true;
  
  /**
   * This check for when gateConsole is looking for the flight
   * that is in 'ready for passengers' status
   *  - to confirm that a check has already been done.
   */
  private boolean checkReady = true;
  
  /**
   * This check for when gateConsole has cleared the previous
   * flight information.
   *  - to confirm that a check has already been done.
   */
  private boolean checkCleared = true;
  
  /**
   * All java swing components  
   */
  private JButton flightDocked; 
  private JButton flightUnloaded; 
  private JButton addPassenger; 
  private JButton flightLoaded;        	
  private JLabel labelFlightCode;
  private JLabel labelDestination;
  private JLabel labelNumberOfPassengers;
  private JTextArea gateInfo;
  
 
   
  /**
   * 
   * @param AircraftManagementDatabase
   * @param gateInfoDatabase
   * @param gateNumber
   * 
   * create new GateConsole interface and as well gate number
   */

  public GateConsole(AircraftManagementDatabase AircraftManagementDatabase, GateInfoDatabase gateInfoDatabase ,int gateNumber) 
  {

	  //Initialise variables 
	  this.AircraftManagementDatabase = AircraftManagementDatabase;
	  
	  this.gateInfoDatabase = gateInfoDatabase;
	  
	  this.gateNumber = gateNumber;
	  
	  this.displayGateNumber = gateNumber + 1;
	  
	  
	  //setup Java Swing frame
	  setTitle("Gate Console for gate " + displayGateNumber);
      setLocation(1210,400);
      setSize(400,310);
      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
      Container window = getContentPane();
      window.setLayout(new FlowLayout());  
      
      //button for dock plane 
      flightDocked = new JButton("Dock Plane");
      window.add(flightDocked);
      flightDocked.addActionListener(this);
      
      //button for Vacant plane
      flightUnloaded = new JButton("Vacant Plane");
      window.add(flightUnloaded);
      flightUnloaded.addActionListener(this);
      
      //button for too add passengers
      addPassenger = new JButton("Add Passenger to Plane");
      window.add(addPassenger);
      addPassenger.addActionListener(this);
      
      //button for dock plane
      flightLoaded = new JButton("Close gate to Plane");
      window.add(flightLoaded);
      flightLoaded.addActionListener(this);
      
      //label for flight code
      labelFlightCode = new JLabel("[FLIGHT CODE]", SwingConstants.CENTER);
      window.add(labelFlightCode);
      
      
      //label for gate Status
      labelDestination  = new JLabel("[DESTINATION]", SwingConstants.CENTER);
      window.add(labelDestination);
      
      //label for gate Status
      labelNumberOfPassengers  = new JLabel("[NUMBER OF PASSENGERS]", SwingConstants.CENTER);
      window.add(labelNumberOfPassengers);
      
      //Text area for gate information
      gateInfo = new JTextArea();
      //gateInfo.setWrapStyleWord(true);
      //gateInfo.setLineWrap(true); 
      //gateInfo.setSize(350, 200);
      //gateInfo.setRows(16);
      JScrollPane pane = new JScrollPane(gateInfo);
      pane.setPreferredSize(new Dimension(350, 150));
      gateInfo.setEditable(false);
      add(pane, BorderLayout.CENTER);
      gateInfo.append("Gate(" + displayGateNumber + ") is now currently in 'free' status \n");
      
      //set buttons to false for error handling 
      flightDocked.setEnabled(false);
      flightUnloaded.setEnabled(false);
      addPassenger.setEnabled(false);
      flightLoaded.setEnabled(false);
      setVisible(true);
      setResizable(false);
      
      //Add Observers for both gate and and aircraft databases
      gateInfoDatabase.addObserver(this);
      AircraftManagementDatabase.addObserver(this);
  }

  	/**
  	 * To call the methods based on action event of 
  	 * when button is pressed.
  	 */
	public void actionPerformed(ActionEvent e) 
	 {
		 if (e.getSource() == flightDocked)
			 	dockFlight();
		 if (e.getSource() == flightUnloaded)
	            unloadFlight();
		 if (e.getSource() == addPassenger)
	            addPassengerToFlight();
		 if (e.getSource() == flightLoaded)
	            loadFlight();	          
	 }

	/**
	 * A method to print the following information when
	 * a flight is allocated and now reserved to this gate.
	 */
	private void checkFlight() {
		
		checkCleared = true;
		
		int whichMr = whichManagementRecord();
		
			String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
			
			gateInfo.append(" \n");
			
			gateInfo.append(flightCode + " is now in 'Taxiing' status \n");
			gateInfo.append("This gate is now in 'Reserved' status for flight " + flightCode + "  \n");
			gateInfo.append(flightCode + " has now arrived at this gate \n");
			
			gateInfo.append("You can now dock this flight \n");
			
			getFlightInfo();
			
		}
		
	
	/**
	 * To set labels that are on the gateConsole 
	 * interface. Which are the flight code, 
	 * the destination and as well 
	 * number of passengers currently on flight.
	 */
	private void getFlightInfo() {
		
		int whichMr = whichManagementRecord();

			labelFlightCode.setText("Flight Code: " + AircraftManagementDatabase.getFlightCode(whichMr));
			
			labelDestination.setText("Destination of flight: " + AircraftManagementDatabase.getItinerary(whichMr).getNext());
			
			String numberOfPassengers = String.valueOf(AircraftManagementDatabase.getPassengerList(whichMr).getSize());
			
			labelNumberOfPassengers.setText("Number of passengers: " + numberOfPassengers);
			
		}
		
		/**
		 * To dock the flight that is in the gate currently.
		 * and as well to change that flight's status to 'Unloading'
		 * and as well to change the gate status to occupied.
		 */
		private void dockFlight() {
			
			checkGotFlight = true;
			
			int whichMr = whichManagementRecord();
		
				gateInfo.append(" \n");
				
				String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
				
				gateInfoDatabase.docked(this.gateNumber);
			
				gateInfo.append(flightCode + " has now docked at this gate \n");
				gateInfo.append("This gate is now in 'Occupied' status for "+ flightCode + " \n");
				gateInfo.append(flightCode + " is in 'Unloading' status \n"); 
			
				getFlightInfo();
				AircraftManagementDatabase.setStatus(whichMr, 7);
				
			}
		
		/**
		 * To unload the flight that is in the gate currently
		 * To delete and reset passenger list that was in the flight
		 * and as well to change the flight status to ready clean and Maint.
		 */
		private void unloadFlight() {
			int whichMr = whichManagementRecord();
			String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
			if(AircraftManagementDatabase.getStatus(whichMr) != 8)
			{
				gateInfo.append(" \n");
				
				AircraftManagementDatabase.getPassengerList(whichMr).clear();
				
				gateInfo.append(flightCode + " has now been vacated \n");	
				
				gateInfo.append(flightCode + " Passenger List's has now been cleared \n");
				
				gateInfo.append(flightCode + " is in 'ready clean and Maint' status \n"); 
				
				gateInfo.append("The 'Add passengers' button will be activated once " + flightCode + "\nis in 'Ready Passengers' status \n"); 
				
				gateInfo.append(" \n");
				
				gateInfo.append(flightCode + " should now be handled from both the Maintenance\nInspector, Cleaning Supervisor \n");
				
				gateInfo.append(" \n");
			
				AircraftManagementDatabase.setStatus(whichMr, 8);
				getFlightInfo();
				
				flightUnloaded.setEnabled(false);
				
			}
			else
			{
				gateInfo.append(flightCode + " Already cleared!\n"); 
			}
		}
		
		/**
		 * To add passenger to the flight.
		 * The user is only required to enter the name of the passenger
		 * when clicking on add passenger button.
		 * There is some error handling to ensure the user enters
		 * a valid name when doing so.
		 * 
		 * Note: There is a passenger limit of 50, so the user
		 * can not exceed this amount. A message will display
		 * when this occurs.
		 */
		private void addPassengerToFlight() {
			int whichMr = whichManagementRecord();
				
			String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
					 
			int numberOfPassengersEntered = AircraftManagementDatabase.getPassengerList(whichMr).getSize();
				
			int maxPassengerSize = AircraftManagementDatabase.getPassengerList(whichMr).getPassengerLimit();
				
				if (numberOfPassengersEntered < maxPassengerSize) {
					
						PassengerDetails passengerName = new PassengerDetails(JOptionPane.showInputDialog("Passenger Name"));
					
						if ( Pattern.matches("^[a-zA-Z ]*$", passengerName.getName()) && !passengerName.getName().isBlank()) {
							
							gateInfo.append("Passenger '" + passengerName.getName() + "' has now been added to "+ flightCode + " flight  \n");			
							AircraftManagementDatabase.addPassenger(whichMr, passengerName);
							getFlightInfo();
							
						}else {
							
							JOptionPane.showMessageDialog(null, "Invalid name. The passenger has not been added to fight. Please ensure that you have type the name correctly next time ");
						}
						
						}else {
								
							JOptionPane.showMessageDialog(null, "You can not add more passengers. As the limit(50 passengers) has reached. You should now load the flight.");
						}
			}
		
		/** 
		 * To load the flight that is in the gate currently.
		 * To save the passenger list of which is polluted by adding passengers button
		 * and as well to change the flight status to 'Ready to Depart'.
		 * 
		 * Note: This method will not run until there is at least one passenger added to the list.
		 */
		private void loadFlight() {
			int whichMr = whichManagementRecord();
			

				int numberOfPassengersEntered = AircraftManagementDatabase.getPassengerList(whichMr).getSize();
				
				if (numberOfPassengersEntered >= 1) {
				gateInfo.append(" \n");
				
				String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
				gateInfo.append("The gate for flight " + flightCode + "is now closed \n");
				gateInfo.append(flightCode + "is now in 'Ready to depart' status \n");
				AircraftManagementDatabase.setStatus(whichMr, 15);
				
				getFlightInfo();
				
				gateInfo.append(" \n");
				
				gateInfo.append("Soon as "+ flightCode + " has departed, the information panel\nwill then be cleared for new allocation \n");
				
				} else {
					
					JOptionPane.showMessageDialog(null, "There's no passengers on board the flight, please ensure there is at least one passenger on the flight");
				}
			}
				
			

		/**
		 * When the flight departs.
		 * The gate status will return to 'free'
		 * Therefore, all previous information for the flight
		 * that just departed, is now gone.
		 * 
		 * The gate is now ready for new Allocation.
		 */
		private void newAllocation() {
			
			checkReady = true;
			
			gateInfo.setText(null);
			
			gateInfo.append("Flight Departed \n");
			gateInfo.append("Previous information for last flight is now cleared \n");
			gateInfo.append("This gate is now back to 'Free' status \n");
			
			labelFlightCode.setText("Flight Code: ");
			
			labelDestination.setText("Destination of flight: ");
			
			labelNumberOfPassengers.setText("Number of passengers: ");
			
		}

	/**
	 * This to update the gates based on observers
	 * changes, it also changes based on flight and gate
	 * statues.
	 * 
	 * It also call some methods that are listed above in
	 * order to display to user on events that are happening
	 * here.
	 */
	@Override
	public void update(Observable o, Object arg) 
	{	
		int whichMr = whichManagementRecord();
		if(whichMr != -1)
		{
			if(gateInfoDatabase.getStatus(gateNumber) != 0)
			{
				if(gateInfoDatabase.getStatus(gateNumber) == 1 && AircraftManagementDatabase.getStatus(whichMr) <= 14)
				{
					if(checkGotFlight == true) {
						
						checkGotFlight = false;
					
						checkFlight();
					}
					
					flightDocked.setEnabled(true);	
					flightUnloaded.setEnabled(false);
					addPassenger.setEnabled(false);
					flightLoaded.setEnabled(false);
					
				}
				else if(gateInfoDatabase.getStatus(gateNumber) == 2 && AircraftManagementDatabase.getStatus(whichMr) == 7)
				{
					flightDocked.setEnabled(false);
					flightUnloaded.setEnabled(true);
					addPassenger.setEnabled(false);
					flightLoaded.setEnabled(false);
				}		
				else if(gateInfoDatabase.getStatus(gateNumber) == 2 && AircraftManagementDatabase.getStatus(whichMr) == 14)
				{
					
					String flightCode = AircraftManagementDatabase.getFlightCode(whichMr);
					
					if(checkReady == true) {
						
						checkReady = false;
						
						gateInfo.append(flightCode + " is now in 'ready for passenger boarding' Status \n");
						gateInfo.append("You can now add passengers to this flight \n");
					}
					
					flightDocked.setEnabled(false);	
					flightUnloaded.setEnabled(false);
					addPassenger.setEnabled(true);
					flightLoaded.setEnabled(true);
				}
				
				else if(AircraftManagementDatabase.getStatus(whichMr) >= 14)
				{
					if(AircraftManagementDatabase.getStatus(whichMr) >= 17) {
						
						if(checkCleared == true) {
							
							checkCleared = false;
							
							newAllocation();
						}	
					}
					
					flightDocked.setEnabled(false);	
					flightUnloaded.setEnabled(false);
					addPassenger.setEnabled(false);
					flightLoaded.setEnabled(false);
				}
			}
		}
	}
	
	/**
	 * To get the flight of it's array in ManagementRecords
	 * This allow gateConsole to know and as well edit details
	 * of the flight it is processing.
	 * 
	 * @return whichMr 
	 */
	public int whichManagementRecord()
	{
		int whichMr = -1;
		for(int i = 0; i < AircraftManagementDatabase.maxMRs; i++)
		{
			if(AircraftManagementDatabase.getGateNumber(i) == gateNumber)
			{
				whichMr = i;
				break;
			}
		}
		return whichMr;

	}
}
